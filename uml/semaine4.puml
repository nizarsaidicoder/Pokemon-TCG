@startuml POOKEMON
title | POOKEMON |
left to right direction

package java.util
{
    class Random
    class Scanner
}
package Collection
{
    abstract class CardCollection
    {
        # m_maxSize : Integer
        # m_size : Integer
        + <<Create>> CardCollection(maxSize : Integer)
        + isEmpty() : Boolean
        + isFull() : Boolean
        + addPokemon(pokemon : Pokemon)
        + removePokemon(pokemon : Pokemon)
        + pickPokemon(index : Integer) : Pokemon
        + getPokemons() : Pokemon[*]
        + getPokemonsWithPower() : PokemonWithPower[*]
        + getPokemon(index : Integer) : Pokemon
        + getSize() : Integer
    }
    class Deck
    {
        + <<Create>> Deck(maxSize : Integer, pokemons : Pokemon[])
    }

    class Field
    {
        + <<Create>> Field(maxSize : Integer)
    }

    class Graveyard
    {
        + <<Create>> Graveyard(maxSize : Integer)
    }

    class Hand
    {
        + <<Create>> Hand(maxSize : Integer)
    }
}
' Heritage
Deck --|> CardCollection
Field --|> CardCollection
Graveyard --|> CardCollection
Hand --|> CardCollection

' AgrÃ©gations
CardCollection o--> " # m_pokemons\n 0.. *" Pokemon.Pokemon

package Player
{
    class Player
    {
        - m_playerNumber : Integer
        - m_name : String
        + <<Create>> Player(pokemons : Pokemon[], playerNumber : Integer, name : String)
        + draw()
        + playEffects(opponent : Player) : Boolean
        - getUserChoice(opponent : Player) : String
        - handleYesChoice(opponent : Player) : Boolean
        - handleSeeChoice(opponent : Player) : Boolean
        - getUserEffectChoice(effectCount : Integer, message : String) : Integer
        + hasEffects() : Boolean
        + useEffects(opponent : Player) : Boolean
        + spawn()
        + attack(opponent : Player)
        + killDeadPokemons(opponent : Player)
        + setPlayablePokemons()
        + hasPlayablePokemons() : Boolean
        + getPlayablePokemons() : Pokemon[*]
        + isDefeated() : Boolean
        + promptPokemon() : Pokemon
        + promptPokemonWithPower(opponent : Player) : PokemonWithPower
        + getTargetPokemon(pokemonWithPower : PokemonWithPower, opponent : Player)
        + promptEnemyPokemon(opponent : Player) : Pokemon
        + getPlayerNumber() : Integer
        + getName() : String
        + getField() : Field
        + getDeck() : Deck
        + getHand() : Hand
        + getGraveyard() : Graveyard
        + getActiveEffects() : Effect[*]
    }

    class AI
    {
        + <<Create>> AI(Pokemons : Pokemon[], playerNumber : Integer)
        + spawn() {redefine}
        + attack(opponent : Player) {redefine}
        + playEffects(opponent : Player) : Boolean {redefine}
        + useEffects(opponent : Player) : Boolean {redefine}
        + getOpponentPokemon(pokemon : Pokemon, pokemon : Pokemon[]) : Pokemon
    }
}

Player.Player *--> "-m_field\n 1" Collection.Field
Player.Player *--> "-m_graveyard\n 1" Collection.Graveyard
Player.Player *--> "-m_deck\n 1" Collection.Deck
Player.Player *--> "-m_hand\n 1" Collection.Hand
Player.Player *--> "-m_scanner\n 1" java.util.Scanner
Player.AI .> "Uses" java.util.Random

AI --up-|> Player.Player

package Pokemon
{
    class Pokemon
    {
       - M_NAME : String {read only}
       - m_hp : Integer
       - m_hpMax : Integer
       - m_attack : Integer
       - m_defense : Integer
       - m_attackPoints : Integer
       + <<Create>> Pokemon(name : String, hp : Integer, attack : Integer, affinity : Affinity)
       + attack(pokemon : Pokemon)
       + isStrongTo(affinity : Affinity) : Boolean
       + isAlive() : Boolean
       + hasEffect() : Boolean
       + getSkillPoints() : Integer
       + getName() : String
       + getDefense() : Integer
       + getHP() : Integer
       + getHPMax() : Integer
       + getAttack() : Integer
       + getAffinity() : Affinity
       + setDefense(defense : Integer)
       + setHP( hp : Integer)
       + setAttack( attack : Integer)
       + setAttackPoints(attackPoints : Integer)
       + setAffinity(affinity : Affinity)
    }

    class PokemonWithPower
    {
        + <<Create>> Pokemon(name : String, hp : Integer, attack : Integer, affinity : Affinity, effect : Effect)
        + activateEffect(target : Pokemon)
        + hasEffect() : Boolean {redefine}
        + getEffect() : Effect
        + setEffect(effect : Effect) : Effect
        + toString() : String {redefine}
    }


    package Affinity
    {
        enum Element
        {
            WATER
            EARTH
            FIRE
            AIR
            ETHER
            ALL 
            NONE
        }
        abstract class Affinity
        {
            + <<Create>> Affinity(element : Element)
            +{abstract} getWeakness() : Element
            +{abstract} getStrength() : Element
            +{abstract} getElement() : Element
        }
        class Water
        {
            + <<Create>> Water()
            + getWeakness() : Element {redefine}
            + getStrength() : Element {redefine}
            + getElement() : Element {redefine}
        }
        class Earth
        {
            + <<Create>> Earth()
            + getWeakness() : Element {redefine}
            + getStrength() : Element {redefine}
            + getElement() : Element {redefine}
        }
        class Fire
        {
            + <<Create>> Fire()
            + getWeakness() : Element {redefine}
            + getStrength() : Element {redefine}
            + getElement() : Element {redefine}
        }
        class Air
        {
            + <<Create>> Air()
            + getWeakness() : Element {redefine}
            + getStrength() : Element {redefine}
            + getElement() : Element {redefine}
        }
        class Ether
        {
            + <<Create>> Ether()
            + getWeakness() : Element {redefine}
            + getStrength() : Element {redefine}
            + getElement() : Element {redefine}
        }
        class Plomb
        {
            + <<Create>> Plomb()
            + getWeakness() : Element {redefine}
            + getStrength() : Element {redefine}
            + getElement() : Element {redefine}
        }
    }

    package Effects
    {
        abstract class Effect
        {
            - m_used : Boolean = false
            - m_description : String
            + <<Create>> Effect(power : Power, description : String, target : TargetType)
            +{abstract}activate(p : Pokemon)
            + isUsed() : Boolean
            + useAgain()
            + getDescription() : String
            + getPower() : Power
            + getTargetType() : TargetType
            + setOwner(p : PokemonWithPower)
        }

        enum Power
        {
            RESISTANCE
            BERSERK
            SOIN_TOTAL
            KAMIKAZE
            A_ETHER
            REGENERATION
            A_PLOMB
            DEJA_VU
        }

        enum TargetType
        {
            ALLY
            ENNEMY
            BOTH
        }
        class Resistance
        {
            + <<Create>> Resistance()
            + activate(p : Pokemon)
        }

        class Berserk
        {
            + <<Create>> Berserk()
            + activate(p : Pokemon) 
        }

        class SoinTotal
        {
            + <<Create>> SoinTotal()
            + activate(p : Pokemon) 
        }

        class Kamikaze
        {
            + <<Create>> Kamikaze()
            + activate(p : Pokemon) 
        }

        class A_Ether
        {
            + <<Create>> A_Ether()
            + activate(p : Pokemon) 
        }

        class Regeneration
        {
            + <<Create>> Regeneration()
            + activate(p : Pokemon) 
        }

        class A_Plomb
        {
            + <<Create>> A_Plomb()
            + activate(p : Pokemon) 
        }

        class DejaVu
        {
            + <<Create>> DejaVu()
            + activate(p : Pokemon) 
        }

        Effect "- m_power\n 1" *-> Power
        Effect <|-- Resistance
        Effect <|-- Berserk
        Effect <|-- SoinTotal
        Effect <|-- Kamikaze
        Effect <|-- A_Ether
        Effect <|-- Regeneration
        Effect <|-- A_Plomb
        Effect <|-- DejaVu
        Effect "- m_targetType\n 1" *--> TargetType
        Effect ...> "Uses" PokemonWithPower
        Effect ...> "Uses" Pokemon.Pokemon
        A_Ether ..> "Uses" Pokemon.Affinity.Affinity
        A_Plomb ..> "Uses" Pokemon.Affinity.Affinity

    }

Affinity.Element "- m_element\n 1"  <--* Affinity.Affinity
Affinity.Affinity "- m_affinity\n 1" <--* Pokemon.Pokemon
PokemonWithPower "- m_effect\n 0..1" *--> Effects.Effect
PokemonWithPower "- m_owner\n 0..1" <--* Effects.Effect
Affinity.Affinity <|-- Affinity.Water
Affinity.Affinity <|-- Affinity.Earth
Affinity.Affinity <|-- Affinity.Fire
Affinity.Affinity <|-- Affinity.Air
Affinity.Affinity <|-- Affinity.Ether
Affinity.Affinity <|-- Affinity.Plomb
Pokemon <|-- PokemonWithPower

}

package UI
{
    class UIFunctions
    {
        +{static}padRight(s : String, n : Integer) : String
        +{static}padRight(s : String, n : Integer, c : Char) : String
        +{static}padLeft(s : String, n : Integer, c : Char) : String
        +{static}padLeft(s : String, n : Integer) : String
        +{static}center(s : String, n : Integer) : String
        +{static}getCorrespondingColor(affinity : Element) : String
        +{static}getCorrespondingColor(power : Power) : String
        +{static}getColorCode(color : String) : String
        +{static}clearTerminal()
        +{static}colorize(text : String, color : String) : String
        +{static}colorize(text : String, foreColor : String, backColor : String) : String
        +{static}colorizeAndCenter(text : String, color : String, n : Integer) : String
        +{static}splitString(input : String, maxChunkSize : Integer) : String[*]
    }
    class Display
    {
        +{static} screenSize : Integer
        +{static} intro()
        +{static} outro()
        +{static} winner(winner : String)
        +{static} credits()
        +{static} gameStatus(turn : Integer, currentPlayer : Player, player : Player, ai : AI)
        +{static} coinFlip(player : Player)
        +{static} spawnPhase()
        +{static} printDeck(size : Integer)
        +{static} printField(pokemons : Pokemon[])
        +{static} printGraveyard(size : Integer)
        +{static} printHand(pokemons : Pokemon[])
        +{static} printAi(ai : Player)
        +{static} printPlayer(player : Player)
        +{static} printPokemon(pokemon : Pokemon)
        +{static} printEffects(effects : Effect[])
        +{static} printEffect(effect : Effect[])
        +{static} battlePhase()
        +[static] effectPhase()
    }
}


package Game
{
class Game
{
    - m_turn : Integer
    - m_winner : String
    + <<Create>> Game()
    + start()
    + play()
    + drawPhase()
    + spawnPhase()
    + EffectPhase()
    + battlePhase()
    + endPhase()
    + initializePlayers()
    + decideFirstPlayer() : Boolean
    + promptUserName() : String
    + isGameOver() : Boolean
}

class PokemonGenerator
{
    +{static} m_pokemonNames : String[]
    +{static} m_effects : Effect[]
    +{static} m_affinities : Affinity[]

    +{static} createPokemons() : Pokemon[]
    +{static} getRandomAffinity() : Affinity
    +{static} getRandomEffect() : Effect
    +{static} shuffle(pokemons : Pokemon[*])
    +{static} getRandom(min : Integer, max : Integer) : Integer
}
}


Game.Game .> "Uses" Display
Game.Game .> "Uses" PokemonGenerator
Display .> "Uses" UI.UIFunctions
Game.Game *--> "-m_player\n 1,1" Player.Player
Game.Game *--> "-m_ai\n 1,1" Player.AI
Game.Game *--> "-m_currentPlayer\n 1,1" Player.Player
Game.Game *--> "-m_winner\n 1,1" Player.Player
' Game.Game *--> "-m_effects\n 0..*" Effects.Effect
Game.Game .> "Uses" UI.UIFunctions
Game.Game .> "Uses" java.util.Random
Game.Game .> "Uses" java.util.Scanner

class Pookemon
{
    +{static}main(arg : String[])
}

Pookemon ..> "uses" Game.Game

@enduml