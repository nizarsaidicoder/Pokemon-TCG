@startuml POOKEMON
title | POOKEMON |
left to right direction

package java.util
{
    class Random
    class Scanner
}
package Collection
{
    abstract class CardCollection
    {
        # m_maxSize : Integer
        # m_size : Integer
        + <<Create>> CardCollection(maxSize : Integer)
        + isEmpty() : Boolean
        + isFull() : Boolean
        + addPokemon(pokemon : Pokemon)
        + removePokemon(pokemon : Pokemon)
        + pickPokemon(index : Integer) : Pokemon
        + getPokemons() : Pokemon[]
        + getPokemon(index : Integer) : Pokemon
        + getSize() : Integer
        + {abstract}display()
        + toString() : String
    }
    class Deck
    {
        + <<Create>> Deck(21/20)
        + display()
        + toString() : String
    }

    class Field
    {
        + <<Create>> Field(3)
        + display()
        + toString() : String
    }

    class Graveyard
    {
        + <<Create>> Graveyard(21)
        + display()
        + toString() : String
    }

    class Hand
    {
        + <<Create>> Hand(5)
        + display()
        + toString() : String
    }
}
' Heritage
Deck --|> CardCollection
Field --|> CardCollection
Graveyard --|> CardCollection
Hand --|> CardCollection
Deck ..> "Uses" Utils.HelperFunctions
Graveyard ..> "Uses" Utils.HelperFunctions
Hand ..> "Uses" Utils.HelperFunctions
Field ..> "Uses" Utils.HelperFunctions


' AgrÃ©gations
CardCollection o--> " # m_pokemons\n0, m_maxSize" Pokemon.Pokemon

package Player
{
    class Player
    {
        - m_playerNumber : Integer
        - m_name : String

        + <<Create>> Player(Pokemons : Pokemon[], playerNumber : Integer)
        + display()
        + draw()
        + attack(opponent : Player)
        + spawn()
        + hasPlayablePokemons() : Boolean
        + isDefeated() : Boolean
        + promptPokemon() : Pokemon
        + promptEnemyPokemon() : Pokemon
        + getPlayablePokemons() : Pokemon[]
        + getPlayerNumber() : Integer
        + getName() : String
        + getField() : Field
        + getGraveyard() : Graveyard
        + getDeck() : Deck
        + getHand() : Hand
        + setPlayablePokemons()
        + toString() : String
    }

    class AI
    {
        + <<Create>> AI(Pokemons : Pokemon[], playerNumber : Integer)
        + spawn()
        + attack(opponent : Player)
        + display()
    }
}

Player.Player *--> "-m_field\n1, 1" Collection.Field
Player.Player *--> "-m_graveyard\n 1,1" Collection.Graveyard
Player.Player *--> "-m_deck\n 1,1" Collection.Deck
Player.Player *--> "-m_hand\n 1,1" Collection.Hand
Player.Player *--> "-m_scanner\n 1,1" java.util.Scanner
Player.Player ..> "Uses" Utils.HelperFunctions
Player.AI ..> "Uses" java.util.Random

AI --up-|> Player.Player

package Pokemon
{
    class Pokemon
    {
       - m_name : String
       - m_hp : Integer
       - m_hpMax : Integer
       - m_attack : Integer
       - m_isPlayable : Boolean
       + <<Create>> Pokemon(name : String, hp : Integer, attack : Integer, affinity : Affinity)
       + isAlive() : Boolean
       + isPlayable() : Boolean
       + setPlayable(isPlayable : Boolean)
       + attack(pokemon : Pokemon)
       + getName() : String
       + getHP() : Integer
       + getHPMax() : Integer
       + getAttack() : Integer
       + getAffinity() : Affinity
       + toString() : String
    }

    enum Element
    {
        WATER
        EARTH
        FIRE
        AIR
    }

    abstract class Affinity
    {
        + <<Create>> Affinity(element : Element)
        +{abstract} getWeakness() : Element
        +{abstract} getStrength() : Element
        +{abstract} getElement() : Element
    }
    class Water
    {
        + <<Create>> Water()
        + getWeakness() : Element
        + getStrength() : Element
        + getElement() : Element
    }
    class Earth
    {
        + <<Create>> Earth()
        + getWeakness() : Element
        + getStrength() : Element
        + getElement() : Element
    }
    class Fire
    {
        + <<Create>> Fire()
        + getWeakness() : Element
        + getStrength() : Element
        + getElement() : Element
    }
    class Air
    {
        + <<Create>> Air()
        + getWeakness() : Element
        + getStrength() : Element
        + getElement() : Element
    }
}
Pokemon.Element "- m_element\n 1,1"  <--* Pokemon.Affinity
Pokemon.Affinity "- m_affinity\n 1,1" <--* Pokemon.Pokemon
Pokemon.Affinity <|-- Pokemon.Water
Pokemon.Affinity <|-- Pokemon.Earth
Pokemon.Affinity <|-- Pokemon.Fire
Pokemon.Affinity <|-- Pokemon.Air
Pokemon.Pokemon ..> "Uses" Utils.HelperFunctions
package Utils
{
    class UIFunctions
    {
        +{static}padRight(s : String, n : Integer) : String
        +{static}padRight(s : String, n : Integer, c : Char) : String
        +{static}padLeft(s : String, n : Integer, c : Char) : String
        +{static}padLeft(s : String, n : Integer) : String
        +{static} center(s : String, n : Integer) : String
        +{static}getCorrespondingColor(affinity : Element) : String
        +{static}getColorCode(color : String) : String
        +{static}clearTerminal()
        +{static}colorize(s : String, color : String) : String
        +{static}colorize(s : String, foreColor : String, backColor : String) : String
        +{static}colorizeAndCenter(s : String, color : String, n : Integer) : String
    }
}

class Game
{
    - m_turn : Integer
    - m_winner : String
    - m_pokemonNames : String[]
    + <<Create>> Game()
    + start()
    + play()
    + drawPhase()
    + spawnPhase()
    + battlePhase()
    + endPhase()
    + initializePlayers()
    + isFirstPlayer() : Boolean
    + promptUserName()
    + isGameOver() : Boolean
    + {static} getRandom(min : Integer, max : Integer) : Integer
    + createPokemons()
}
class Display
{
    +{static} screenSize : Integer
    +{static} intro()
    +{static} outro()
    +{static} winner(winner : String)
    +{static} credits()
    +{static} gameStatus(turn : Integer, currentPlayer : Player, player : Player, ai : AI)
    +{static} coinFlip(Player)
    +{static} spawnPhase()
    +{static} battlePhase()
}
Game ..> "Uses" Display
Display ..> "Uses" Utils.HelperFunctions
Game *--> "-m_player\n 1,1" Player.Player
Game *--> "-m_ai\n 1,1" Player.AI
Game *--> "-m_currentPlayer\n 1,1" Player.Player
Game *--> "-m_winner\n 1,1" Player.Player
Game ..> "Uses" Utils.HelperFunctions
Game ..> "Uses" java.util.Random
Game ..> "Uses" java.util.Scanner
class Pookemon
{
    +{static}main(arg : String*)
}

Pookemon ..> "uses" Game
Field ..> "uses" Utils.HelperFunctions

@enduml